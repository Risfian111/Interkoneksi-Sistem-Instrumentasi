#include "influxreader.h"
#include <QNetworkRequest>
#include <QUrl>

InfluxReader::InfluxReader(QObject *parent)
    : QObject(parent)
{
    manager = new QNetworkAccessManager(this);
    connect(manager, &QNetworkAccessManager::finished, this, &InfluxReader::onReply);
}

void InfluxReader::queryInflux()
{
    QString org = "BLITAR";
    QString token = "YOUR_TOKEN_HERE"; // ganti token Anda
    QString url = "http://localhost:8086/api/v2/query?org=" + org;

    QNetworkRequest request(QUrl(url));
    request.setRawHeader("Authorization", ("Token " + token).toUtf8());
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/vnd.flux");

    QString fluxQuery = "from(bucket: \"pertanian\") |> range(start: -1m)";

    manager->post(request, fluxQuery.toUtf8());
}

void InfluxReader::onReply(QNetworkReply *reply)
{
    if (reply->error() != QNetworkReply::NoError) {
        qDebug() << "Error:" << reply->errorString();
        reply->deleteLater();
        return;
    }

    QByteArray responseData = reply->readAll();
    qDebug() << "Response from InfluxDB:" << responseData;
    emit dataReceived(responseData);

    reply->deleteLater();
}


#ifndef INFLUXREADER_H
#define INFLUXREADER_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkReply>

class InfluxReader : public QObject
{
    Q_OBJECT

public:
    explicit InfluxReader(QObject *parent = nullptr);
    void queryInflux();

signals:
    void dataReceived(const QByteArray &data);

private slots:
    void onReply(QNetworkReply *reply);

private:
    QNetworkAccessManager *manager;
};

#endif // INFLUXREADER_H
#ifndef INFLUXREADER_H
#define INFLUXREADER_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkReply>

class InfluxReader : public QObject
{
    Q_OBJECT

public:
    explicit InfluxReader(QObject *parent = nullptr);
    void queryInflux();

signals:
    void dataReceived(const QByteArray &data);

private slots:
    void onReply(QNetworkReply *reply);

private:
    QNetworkAccessManager *manager;
};

#endif // INFLUXREADER_H

